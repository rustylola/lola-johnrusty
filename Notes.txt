Array Method:
- foreach 
    typically loop the array 

- map
    return new array
    ------ Example ------
    const numbers = [1, 2, 3, 4, 5]; 

    const bigNumbers = numbers.map(number => {
        return number * 10;
    });
    console.log(numbers); // Output: [1, 2, 3, 4, 5]
    console.log(bigNumbers); // Output: [10, 20, 30, 40, 50]
    ------ End ------

- filter
    return new array that always true
    ------ Example ------
    const words = ['pillow', 'brick', 'pen', 'door']; 

    const shortWords = words.filter(word => {
        return word.length < 6;
    });
    console.log(words); // Output: ['pillow', 'brick', 'pen', 'door']; 
    console.log(shortWords); // Output: ['brick', 'pen', 'door']
    ------ End ------

- findIndex
    return the index of the first element that evaluates to true in the callback
    ------ Example ------
    const jumbledNums = [123, 25, 78, 5, 9]; 

    const lessThanTen = jumbledNums.findIndex(num => {
        return num < 10;
    });
    console.log(lessThanTen); // Output: 3 
    console.log(jumbledNums[3]); // Output: 5
    ------ End ------

- reduce
    returns a single value after iterating through the elements of an array, thereby reducing the array. 
    ------ Example ------
    const numbers = [1, 2, 4, 10];

    const summedNums = numbers.reduce((accumulator, currentValue) => {
        return accumulator + currentValue
    })

    console.log(summedNums) // Output: 17

    Iteration	accumulator	currentValue	return value
    First	        1	        2	            3
    Second	        3	        4	            7
    Third	        7	        10	            17
    ------ End ------
- some
    return boolean checking each value that meet the condition return true if at least 1 true, otherwise, return false if all false
    const words = ['unique', 'uncanny', 'pique', 'oxymoron', 'guise'];

    // Something is missing in the method call below

    console.log(words.some((word) => {
        return word.length < 6;
    }));

- every
    return boolean checking each value that meet the condition return true if all true, otherwise, at least 1 false, return false 
    ------ Example ------
    const isBelowThreshold = (currentValue) => currentValue < 40;

    const array1 = [1, 30, 39, 29, 10, 13];

    console.log(array1.every(isBelowThreshold));
    // Expected output: true
    ------ End ------

    // for (i of findMyCart.children) {
            // console.log(i.querySelector('.remove'));
            // i.addEventListener('click', function() {
            //     console.log(this);
            // });
        // }


#### NPM Command

-> npm create vite@latest react-deep-dive

-> cd react-deep-dive
    npm install
    npm run dev
    npm install react-icons react-bootstrap bootstrap
    npm install react-router-dom
    npm install jsonwebtoken byscriptjs express-validator
    npm install react-responsive-masonry --save
    
    ****** Tailwind Setup ******
    npm install -D tailwindcss postcss autoprefixer
    npx tailwindcss init
    -> touch postcss.config.cjs
        module.exports = {
            plugins: {
            tailwindcss: {},
            autoprefixer: {},
            },
        };
    -> tailwind.config.js
        module.exports = {
        content: [
            "./index.html",
            "./src/**/*.{js,ts,jsx,tsx}",
        ],
        theme: {
            extend: {},
        },
        plugins: [require("daisyui")],
        daisyui: {
            themes: [
            {
                mytheme: {
                primary: "#2D3748", // Dark gray for primary UI elements
                secondary: "#A0AEC0", // Cool gray for secondary UI elements
                accent: "#38B2AC", // Teal for accent highlights
                neutral: "#EDF2F7", // Light gray for neutral backgrounds
                "base-100": "#FFFFFF", // Clean white for base
                "base-content": "#1A202C", // Dark gray for text
                info: "#3182CE", // Muted blue for information
                success: "#48BB78", // Fresh green for success messages
                warning: "#D69E2E", // Warm yellow for warnings
                error: "#E53E3E", // Soft red for errors
                },
            },
            ],
        },
        };

        -> index.css
            @tailwind base;
            @tailwind components;
            @tailwind utilities;

        ****** Tailwind Setup End ******

    -> form
    npm install react-hook-form

    -> react query
    npm install react-query
    npm install @tanstack/react-query
// Add extensions
 -> Es7

# Backend
npm install bcryptjs dotenv express jsonwebtoken 
npm install mongoose cors nodemailer stripe body-parser
npm install --save-dev nodemon
## Reach Hook ##
// state
useState - React Hook
